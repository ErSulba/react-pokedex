{"version":3,"sources":["componets/info/Image.js","componets/info/moves.js","componets/info/info.js","componets/pokemon/components/search.js","componets/pokemon/Pokemon.js","App.js","serviceWorker.js","index.js"],"names":["Image","props","react_default","a","createElement","alt","name","src","front_default","Moves","Info","sprites","Object","assign","moves","Search","_ref","handleOnchange","onChange","placeholder","Pokemon","state","pokemon","text","getPokemon","_callee","event","response","regenerator_default","wrap","_context","prev","next","Axios","get","concat","target","value","sent","_this","setState","data","t0","console","error","stop","this","Component","App","className","Pokemon_Pokemon","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8RAEe,SAASA,EAAMC,GAC5B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAMK,KAAMC,IAAKN,EAAMO,gBCFtB,SAASC,EAAMR,GAC5B,OACEC,EAAAC,EAAAC,cAAA,YCAW,SAASM,EAAKT,GAC3B,IAAMU,EAAUV,EAAMU,QAEtB,OACET,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACKH,EAAMK,MAEXJ,EAAAC,EAAAC,cAACJ,EAADY,OAAAC,OAAA,CAAOP,KAAML,EAAMK,MAAUK,IAC7BT,EAAAC,EAAAC,cAACK,EAAD,CAAOK,MAAOb,EAAMa,8BCXX,SAASC,EAATC,GAAkC,IAAjBC,EAAiBD,EAAjBC,eAC9B,OACEf,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOc,SAAUD,EAAgBE,YAAY,8CCA9BC,6MACnBC,MAAQ,CACNC,QAAS,YACTC,KAAM,MAGRC,iDAAa,SAAAC,EAAMC,GAAN,IAAAC,EAAA,OAAAC,EAAAzB,EAAA0B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEcC,IAAMC,IAAN,qCAAAC,OAA+CT,EAAMU,OAAOC,MAA5D,MAFd,OAEHV,EAFGG,EAAAQ,KAITC,EAAKC,SAAS,CACZlB,QAASK,EAASc,OALXX,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAY,GAAAZ,EAAA,SASTa,QAAQC,MAARd,EAAAY,IATS,yBAAAZ,EAAAe,SAAApB,EAAAqB,KAAA,0IAeX,OACE5C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAACM,EAASoC,KAAKzB,MAAMC,SACrBpB,EAAAC,EAAAC,cAACW,EAAD,CAAQE,eAAgB6B,KAAKtB,qBAzBAuB,aCStBC,mLARX,OACE9C,EAAAC,EAAAC,cAAA,OAAK6C,UAAU,OACb/C,EAAAC,EAAAC,cAAC8C,EAAD,cAJUH,aCQEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ce90391f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Image(props) {\r\n  return (\r\n    <img alt={props.name} src={props.front_default} >\r\n    </img>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Moves(props) {\r\n  return (\r\n    <div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Image from './Image';\r\nimport Moves from './moves';\r\n\r\nexport default function Info(props) {\r\n  const sprites = props.sprites\r\n  // const default_sprite = sprites.front_default\r\n  return (\r\n    <div>\r\n      <h1>\r\n          {props.name}\r\n      </h1>\r\n      <Image name={props.name} {...sprites} />\r\n      <Moves moves={props.moves} ></Moves>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Search({handleOnchange}) {\r\n  return (\r\n    <div>\r\n      <input onChange={handleOnchange} placeholder='search pokemon by dex number or name' />\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\nimport Info from '../info/info';\r\nimport Axios from 'axios';\r\nimport Search from './components/search';\r\n\r\nexport default class Pokemon extends Component {\r\n  state = {\r\n    pokemon: 'bulbasaur',\r\n    text: ''\r\n  }\r\n\r\n  getPokemon = async event => {\r\n    try {\r\n      const response = await Axios.get(`https://pokeapi.co/api/v2/pokemon/${event.target.value}/`)\r\n      // console.log(response)\r\n      this.setState({\r\n        pokemon: response.data\r\n      })\r\n      // console.log(this.state.pokemon)\r\n    }catch(error){\r\n      console.error(error)\r\n    }\r\n   \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p> This is a test</p>\r\n        <Info {...this.state.pokemon}/>\r\n        <Search handleOnchange={this.getPokemon} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.scss';\nimport Pokemon from './componets/pokemon/Pokemon';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Pokemon/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}