{"version":3,"sources":["componets/info/Name.module.scss","componets/pokemon/components/search.module.scss","componets/info/Image.js","componets/info/moves.js","componets/info/Entrie.js","componets/info/Name.js","componets/info/info.js","componets/pokemon/components/search.js","utils/Pokemon.js","utils/misc.js","componets/pokemon/Pokemon.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","name","search","Image","props","react_default","a","createElement","alt","src","sprite","Moves","Entrie","_ref","entries","key","pokedex_entries","map","entrie","language","version","flavor_text","Name","className","styles","Info","isOk","moves","Search","handleOnchange","onChange","placeholder","Pokemon","data","species_data","Object","classCallCheck","this","id","sprites","front_default","type","types","flavor_text_entries","convertString","input","toLowerCase","Pokedex","state","pokemon","text","getPokemon","_callee","event","value","response","url","speciesResponse","regenerator_default","wrap","_context","prev","next","converString","target","Axios","get","concat","sent","species","_this","setState","t0","console","error","stop","assign","Component","App","Pokemon_Pokedex","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1fb67277.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"Name_name__1SVQA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"search_search__wRJSD\"};","import React from 'react'\r\n\r\nexport default function Image(props) {\r\n  return (\r\n    <img alt={props.name} src={props.sprite} >\r\n    </img>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Moves(props) {\r\n  return (\r\n    <div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Entrie({entries}) {\r\n  let key = 0\r\n  const pokedex_entries = entries.map(entrie => {\r\n    if (entrie.language.name === 'en' & entrie.version.name === 'moon') {\r\n      return <p key={key++} >{entrie.flavor_text} </p>\r\n    }\r\n  })\r\n  return (\r\n    <div>\r\n      {pokedex_entries}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport styles from './Name.module.scss'\r\n\r\nexport default function Name({name}) {\r\n  return (\r\n    <h1 className={styles.name} >{name} </h1>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Image from './Image';\r\nimport Moves from './moves';\r\nimport Entrie from './Entrie';\r\nimport Name from './Name';\r\n\r\nexport default function Info(props) {\r\n  const isOk = props.isOk\r\n  if (!isOk) {\r\n    return null\r\n  }\r\n  return (\r\n    <div>\r\n      <Name name={props.name} />\r\n      <Image name={props.name} sprite={props.sprite} />\r\n      <Entrie entries={props.entries} />\r\n      <Moves moves={props.moves} ></Moves>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport styles from './search.module.scss'\r\nexport default function Search({handleOnchange}) {\r\n  return (\r\n    <div className={styles.search}>\r\n      <div>\r\n      <input onChange={handleOnchange} placeholder='search pokemon by dex number or name' />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","class Pokemon {\r\n  constructor(data, species_data){\r\n    this.id = data.id\r\n    this.name = data.name;\r\n    this.sprite = data.sprites.front_default\r\n    this.type = data.types\r\n    this.moves = data.moves\r\n    this.entries = species_data.flavor_text_entries\r\n  }\r\n}\r\n\r\nexport default Pokemon","const convertString = (input) => {\r\n  if (typeof input === 'string') {\r\n    return input.toLowerCase()\r\n  }else{\r\n    return input\r\n  }\r\n}\r\n\r\nexport default convertString","import React, { Component } from 'react'\r\nimport Info from '../info/info';\r\nimport Axios from 'axios';\r\nimport Search from './components/search';\r\nimport Pokemon from './../../utils/Pokemon'\r\nimport converString from './../../utils/misc';\r\n\r\nexport default class Pokedex extends Component {\r\n  state = {\r\n    pokemon: null,\r\n    text: '',\r\n    isOk: false,\r\n  }\r\n\r\n  getPokemon = async event => {\r\n    let value = converString(event.target.value) \r\n    if (value !== '' ) {\r\n      try {\r\n      const response = await Axios.get(`https://pokeapi.co/api/v2/pokemon/${value}/`)\r\n      const {species: {url}} = response.data\r\n      const speciesResponse = await Axios.get(url)\r\n      const pokemon =  new Pokemon(response.data, speciesResponse.data)\r\n      // this.getPokemonSpecies(url)\r\n      this.setState({\r\n        pokemon,\r\n        isOk : true\r\n      })\r\n      \r\n      }catch(error){\r\n        console.error(error)\r\n        this.setState({isOk: false})\r\n      }\r\n    }   \r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1> React Pokedex </h1>\r\n        <Info {...this.state.pokemon} isOk={this.state.isOk} />\r\n        <Search handleOnchange={this.getPokemon} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.scss';\nimport Pokedex from './componets/pokemon/Pokemon';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Pokedex/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}