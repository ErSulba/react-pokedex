{"version":3,"sources":["componets/pokemon/components/search.module.scss","componets/info/Image.js","componets/info/moves.js","componets/info/Entrie.js","componets/info/Name.js","componets/info/info.js","componets/pokemon/components/search.js","componets/pokemon/Pokemon.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","search","Image","props","react_default","a","createElement","alt","name","src","front_default","Moves","Entrie","_ref","entries","Name","Info","sprites","isOk","Object","assign","flavor_text_entries","moves","Search","handleOnchange","className","styles","onChange","placeholder","Pokemon","state","pokemon","text","speciesData","getPokemon","_callee","event","value","response","url","regenerator_default","wrap","_context","prev","next","target","Axios","get","concat","sent","data","species","_this","setState","getPokemonSpecies","t0","console","error","stop","this","_callee2","speciesUrl","_context2","Component","App","Pokemon_Pokemon","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.738c4fc0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"search_search__wRJSD\"};","import React from 'react'\r\n\r\nexport default function Image(props) {\r\n  return (\r\n    <img alt={props.name} src={props.front_default} >\r\n    </img>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Moves(props) {\r\n  return (\r\n    <div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Entrie({entries}) {\r\n  /* TODO: add logic to iterate trought all entries */\r\n  return (\r\n    <div>\r\n      <p> this is a pokdex entrie</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Name({name}) {\r\n  return (\r\n    <h1>{name} </h1>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Image from './Image';\r\nimport Moves from './moves';\r\nimport Entrie from './Entrie';\r\nimport Name from './Name';\r\n\r\nexport default function Info(props) {\r\n  const sprites = props.sprites\r\n  const isOk = props.isOk\r\n  if (!isOk) {\r\n    return null\r\n  }\r\n  return (\r\n    <div>\r\n      <Name name={props.name} />\r\n      <Image name={props.name} {...sprites} />\r\n      <Entrie entries={props.flavor_text_entries} />\r\n      <Moves moves={props.moves} ></Moves>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport styles from './search.module.scss'\r\nexport default function Search({handleOnchange}) {\r\n  return (\r\n    <div className={styles.search}>\r\n      <div>\r\n      <input onChange={handleOnchange} placeholder='search pokemon by dex number or name' />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\nimport Info from '../info/info';\r\nimport Axios from 'axios';\r\nimport Search from './components/search';\r\n\r\nexport default class Pokemon extends Component {\r\n  state = {\r\n    pokemon: null,\r\n    text: '',\r\n    isOk: false,\r\n    speciesData: null\r\n  }\r\n\r\n  getPokemon = async event => {\r\n    let value = event.target.value\r\n    if (value !== '' ) {\r\n      try {\r\n      const response = await Axios.get(`https://pokeapi.co/api/v2/pokemon/${value}/`)\r\n      const {species: {url}} = response.data \r\n      this.setState({\r\n        pokemon: response.data,\r\n        isOk: true\r\n      })\r\n      this.getPokemonSpecies(url)\r\n      \r\n    }catch(error){\r\n      console.error(error)\r\n      this.setState({isOk: false})\r\n    }\r\n    }   \r\n  }\r\n  getPokemonSpecies = async (speciesUrl) => {\r\n    try {\r\n      const response = await Axios.get(speciesUrl)\r\n      this.setState({speciesData: response.data})\r\n    } catch (error) {\r\n      \r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p> This is a test</p>\r\n        <Info {...this.state.pokemon} isOk={this.state.isOk} {...this.state.speciesData}/>\r\n        <Search handleOnchange={this.getPokemon} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.scss';\nimport Pokemon from './componets/pokemon/Pokemon';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Pokemon/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}